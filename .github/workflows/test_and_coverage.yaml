name: Test and Coverage
on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.13'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        
      - name: Install dependencies
        run: uv sync --all-extras
        
      - name: Turn off default branching
        shell: bash
        run: bash ./update_itemization.sh
        
      - name: Run baseline tests - states only
        env:
          PYTHONUNBUFFERED: 1
          PYTHONGC: "100,10,10"  # Aggressive garbage collection
        run: |
          # Run state tests separately to manage memory
          uv run coverage run --branch --data-file=.coverage.baseline.states -m policyengine_core.scripts.policyengine_command test policyengine_us/tests/policy/baseline/gov/states -c policyengine_us
          
      - name: Run baseline tests - federal and other
        env:
          PYTHONUNBUFFERED: 1
          PYTHONGC: "100,10,10"  # Aggressive garbage collection
        run: |
          # Run all non-state baseline tests (exclude states directory)
          uv run coverage run --branch --data-file=.coverage.baseline.federal \
            -m policyengine_core.scripts.policyengine_command test \
            policyengine_us/tests/policy/baseline/calcfunctions \
            policyengine_us/tests/policy/baseline/contrib \
            policyengine_us/tests/policy/baseline/household \
            policyengine_us/tests/policy/baseline/income \
            policyengine_us/tests/policy/baseline/parameters \
            policyengine_us/tests/policy/baseline/gov/aca \
            policyengine_us/tests/policy/baseline/gov/doe \
            policyengine_us/tests/policy/baseline/gov/ed \
            policyengine_us/tests/policy/baseline/gov/fcc \
            policyengine_us/tests/policy/baseline/gov/hhs \
            policyengine_us/tests/policy/baseline/gov/hud \
            policyengine_us/tests/policy/baseline/gov/irs \
            policyengine_us/tests/policy/baseline/gov/local \
            policyengine_us/tests/policy/baseline/gov/simulation \
            policyengine_us/tests/policy/baseline/gov/ssa \
            policyengine_us/tests/policy/baseline/gov/tax \
            policyengine_us/tests/policy/baseline/gov/territories \
            policyengine_us/tests/policy/baseline/gov/usda \
            policyengine_us/tests/policy/baseline/gov/abolitions.yaml \
            -c policyengine_us
          
      - name: Run non-structural YAML tests (reform)
        env:
          PYTHONUNBUFFERED: 1
          PYTHONGC: "100,10,10"  # Aggressive garbage collection
        run: |
          # Run reform tests directly with coverage
          uv run coverage run --branch --data-file=.coverage.reform -m policyengine_core.scripts.policyengine_command test policyengine_us/tests/policy/reform -c policyengine_us
          
      - name: Run structural YAML tests
        env:
          PYTHONUNBUFFERED: 1
          PYTHONGC: "100,10,10"  # Aggressive garbage collection
        run: |
          # Run contrib tests directly with coverage
          uv run coverage run --branch --data-file=.coverage.contrib -m policyengine_core.scripts.policyengine_command test policyengine_us/tests/policy/contrib -c policyengine_us
          
      - name: Run Python-based tests
        env:
          PYTHONUNBUFFERED: 1
          COVERAGE_FILE: .coverage.pytest
        run: |
          uv run python -m coverage run --branch --data-file=.coverage.pytest -m pytest policyengine_us/tests/ --maxfail=0
          
      - name: Produce combined coverage report
        run: |
          # Combine all parallel coverage files (including baseline.states and baseline.federal)
          uv run coverage combine .coverage.* || echo "No coverage files to combine"
          uv run coverage xml -i
          
      - name: Generate coverage summary
        run: |
          # Generate coverage report for variables only
          echo "Generating coverage summary..."
          COVERAGE_OUTPUT=$(uv run coverage report --include="policyengine_us/variables/*" || echo "No coverage data")
          
          # Extract total coverage percentage
          TOTAL_COVERAGE=$(echo "$COVERAGE_OUTPUT" | grep "TOTAL" | awk '{print $NF}' || echo "0%")
          
          # Write to GitHub Actions summary (visible in Actions tab)
          echo "## ðŸ“Š Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Coverage: $TOTAL_COVERAGE**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show files with low coverage
          echo "### Files with Coverage < 80%:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$COVERAGE_OUTPUT" | awk '$NF ~ /%/ {gsub("%","",$NF); if($NF+0 < 80 && $1 != "TOTAL") print $1, $NF"%"}' | head -20 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Also output to logs for visibility
          echo "Total Coverage: $TOTAL_COVERAGE"
          
      - name: Post coverage to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Get coverage from previous step
            const fs = require('fs');
            const coverageOutput = await exec.getExecOutput('uv', ['run', 'coverage', 'report', '--include=policyengine_us/variables/*']);
            const lines = coverageOutput.stdout.split('\n');
            const totalLine = lines.find(line => line.includes('TOTAL'));
            const coverage = totalLine ? totalLine.split(/\s+/).pop() : 'N/A';
            
            // Post simple comment to PR
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ“Š **Coverage Summary**: ${coverage} coverage of variables`
            });
        continue-on-error: true
          
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
